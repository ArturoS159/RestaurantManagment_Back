/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.przemarcz.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class AccesAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccesAvro\",\"namespace\":\"com.przemarcz.avro\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"RestaurantDo\",\"symbols\":[\"ADD\",\"DEL\"]}},{\"name\":\"restaurantId\",\"type\":\"string\",\"logicalType\":\"UUID\"},{\"name\":\"userId\",\"type\":\"string\",\"logicalType\":\"UUID\"}]}");
    private static final long serialVersionUID = -1499481383644579322L;
    private static final SpecificData MODEL$ = new SpecificData();
    private static final BinaryMessageEncoder<AccesAvro> ENCODER =
            new BinaryMessageEncoder<AccesAvro>(MODEL$, SCHEMA$);
    private static final BinaryMessageDecoder<AccesAvro> DECODER =
            new BinaryMessageDecoder<AccesAvro>(MODEL$, SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<AccesAvro>
            WRITER$ = (org.apache.avro.io.DatumWriter<AccesAvro>) MODEL$.createDatumWriter(SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<AccesAvro>
            READER$ = (org.apache.avro.io.DatumReader<AccesAvro>) MODEL$.createDatumReader(SCHEMA$);
    private com.przemarcz.avro.RestaurantDo type;
    private java.lang.CharSequence restaurantId;
    private java.lang.CharSequence userId;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public AccesAvro() {
    }

    /**
     * All-args constructor.
     *
     * @param type         The new value for type
     * @param restaurantId The new value for restaurantId
     * @param userId       The new value for userId
     */
    public AccesAvro(com.przemarcz.avro.RestaurantDo type, java.lang.CharSequence restaurantId, java.lang.CharSequence userId) {
        this.type = type;
        this.restaurantId = restaurantId;
        this.userId = userId;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<AccesAvro> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<AccesAvro> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<AccesAvro> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<AccesAvro>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Deserializes a AccesAvro from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a AccesAvro instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static AccesAvro fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Creates a new AccesAvro RecordBuilder.
     *
     * @return A new AccesAvro RecordBuilder
     */
    public static com.przemarcz.avro.AccesAvro.Builder newBuilder() {
        return new com.przemarcz.avro.AccesAvro.Builder();
    }

    /**
     * Creates a new AccesAvro RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new AccesAvro RecordBuilder
     */
    public static com.przemarcz.avro.AccesAvro.Builder newBuilder(com.przemarcz.avro.AccesAvro.Builder other) {
        if (other == null) {
            return new com.przemarcz.avro.AccesAvro.Builder();
        } else {
            return new com.przemarcz.avro.AccesAvro.Builder(other);
        }
    }

    /**
     * Creates a new AccesAvro RecordBuilder by copying an existing AccesAvro instance.
     *
     * @param other The existing instance to copy.
     * @return A new AccesAvro RecordBuilder
     */
    public static com.przemarcz.avro.AccesAvro.Builder newBuilder(com.przemarcz.avro.AccesAvro other) {
        if (other == null) {
            return new com.przemarcz.avro.AccesAvro.Builder();
        } else {
            return new com.przemarcz.avro.AccesAvro.Builder(other);
        }
    }

    /**
     * Serializes this AccesAvro to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return type;
            case 1:
                return restaurantId;
            case 2:
                return userId;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                type = (com.przemarcz.avro.RestaurantDo) value$;
                break;
            case 1:
                restaurantId = (java.lang.CharSequence) value$;
                break;
            case 2:
                userId = (java.lang.CharSequence) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'type' field.
     *
     * @return The value of the 'type' field.
     */
    public com.przemarcz.avro.RestaurantDo getType() {
        return type;
    }

    /**
     * Sets the value of the 'type' field.
     *
     * @param value the value to set.
     */
    public void setType(com.przemarcz.avro.RestaurantDo value) {
        this.type = value;
    }

    /**
     * Gets the value of the 'restaurantId' field.
     *
     * @return The value of the 'restaurantId' field.
     */
    public java.lang.CharSequence getRestaurantId() {
        return restaurantId;
    }

    /**
     * Sets the value of the 'restaurantId' field.
     *
     * @param value the value to set.
     */
    public void setRestaurantId(java.lang.CharSequence value) {
        this.restaurantId = value;
    }

    /**
     * Gets the value of the 'userId' field.
     *
     * @return The value of the 'userId' field.
     */
    public java.lang.CharSequence getUserId() {
        return userId;
    }

    /**
     * Sets the value of the 'userId' field.
     *
     * @param value the value to set.
     */
    public void setUserId(java.lang.CharSequence value) {
        this.userId = value;
    }

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeEnum(this.type.ordinal());

        out.writeString(this.restaurantId);

        out.writeString(this.userId);

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.type = com.przemarcz.avro.RestaurantDo.values()[in.readEnum()];

            this.restaurantId = in.readString(this.restaurantId instanceof Utf8 ? (Utf8) this.restaurantId : null);

            this.userId = in.readString(this.userId instanceof Utf8 ? (Utf8) this.userId : null);

        } else {
            for (int i = 0; i < 3; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.type = com.przemarcz.avro.RestaurantDo.values()[in.readEnum()];
                        break;

                    case 1:
                        this.restaurantId = in.readString(this.restaurantId instanceof Utf8 ? (Utf8) this.restaurantId : null);
                        break;

                    case 2:
                        this.userId = in.readString(this.userId instanceof Utf8 ? (Utf8) this.userId : null);
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }

    /**
     * RecordBuilder for AccesAvro instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccesAvro>
            implements org.apache.avro.data.RecordBuilder<AccesAvro> {

        private com.przemarcz.avro.RestaurantDo type;
        private java.lang.CharSequence restaurantId;
        private java.lang.CharSequence userId;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(com.przemarcz.avro.AccesAvro.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.type)) {
                this.type = data().deepCopy(fields()[0].schema(), other.type);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.restaurantId)) {
                this.restaurantId = data().deepCopy(fields()[1].schema(), other.restaurantId);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.userId)) {
                this.userId = data().deepCopy(fields()[2].schema(), other.userId);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
        }

        /**
         * Creates a Builder by copying an existing AccesAvro instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(com.przemarcz.avro.AccesAvro other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.type)) {
                this.type = data().deepCopy(fields()[0].schema(), other.type);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.restaurantId)) {
                this.restaurantId = data().deepCopy(fields()[1].schema(), other.restaurantId);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.userId)) {
                this.userId = data().deepCopy(fields()[2].schema(), other.userId);
                fieldSetFlags()[2] = true;
            }
        }

        /**
         * Gets the value of the 'type' field.
         *
         * @return The value.
         */
        public com.przemarcz.avro.RestaurantDo getType() {
            return type;
        }


        /**
         * Sets the value of the 'type' field.
         *
         * @param value The value of 'type'.
         * @return This builder.
         */
        public com.przemarcz.avro.AccesAvro.Builder setType(com.przemarcz.avro.RestaurantDo value) {
            validate(fields()[0], value);
            this.type = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'type' field has been set.
         *
         * @return True if the 'type' field has been set, false otherwise.
         */
        public boolean hasType() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'type' field.
         *
         * @return This builder.
         */
        public com.przemarcz.avro.AccesAvro.Builder clearType() {
            type = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'restaurantId' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getRestaurantId() {
            return restaurantId;
        }


        /**
         * Sets the value of the 'restaurantId' field.
         *
         * @param value The value of 'restaurantId'.
         * @return This builder.
         */
        public com.przemarcz.avro.AccesAvro.Builder setRestaurantId(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.restaurantId = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'restaurantId' field has been set.
         *
         * @return True if the 'restaurantId' field has been set, false otherwise.
         */
        public boolean hasRestaurantId() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'restaurantId' field.
         *
         * @return This builder.
         */
        public com.przemarcz.avro.AccesAvro.Builder clearRestaurantId() {
            restaurantId = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'userId' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getUserId() {
            return userId;
        }


        /**
         * Sets the value of the 'userId' field.
         *
         * @param value The value of 'userId'.
         * @return This builder.
         */
        public com.przemarcz.avro.AccesAvro.Builder setUserId(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.userId = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'userId' field has been set.
         *
         * @return True if the 'userId' field has been set, false otherwise.
         */
        public boolean hasUserId() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'userId' field.
         *
         * @return This builder.
         */
        public com.przemarcz.avro.AccesAvro.Builder clearUserId() {
            userId = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public AccesAvro build() {
            try {
                AccesAvro record = new AccesAvro();
                record.type = fieldSetFlags()[0] ? this.type : (com.przemarcz.avro.RestaurantDo) defaultValue(fields()[0]);
                record.restaurantId = fieldSetFlags()[1] ? this.restaurantId : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.userId = fieldSetFlags()[2] ? this.userId : (java.lang.CharSequence) defaultValue(fields()[2]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}










